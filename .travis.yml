language: cpp

branches:
  except:
    - i18n-master

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          packages:
            - libcurl4-openssl-dev
            - libgtk-3-dev
            - libncurses-dev
            - libpulse-dev
            - libudev-dev

    - os: linux
      compiler: clang
      addons:
        apt:
          packages:
            - libcurl4-openssl-dev
            - libgtk-3-dev
            - libncurses-dev
            - libpulse-dev
            - libudev-dev

    - os: osx
      osx_image: xcode10.2
      compiler: gcc

    - os: osx
      osx_image: xcode10.2
      compiler: clang

    - os: linux
      dist: xenial
      compiler: gcc
      env:
        - AppImageBuild=True
        - AppImageArch=x86_64
      addons:
        apt:
          packages:
            - g++-multilib
            - nasm
            - wine1.6-dev
            - yasm

    - os: linux
      dist: xenial
      compiler: gcc
      env:
        - AppImageBuild=True
        - AppImageArch=i686
      addons:
        apt:
          packages:
            - g++-multilib
            - nasm
            - wine1.6-dev:i386
            - yasm

    - os: linux
      dist: xenial
      compiler: gcc
      env:
        - AppImageBuild=True
        - AppImageArch=armhf
      addons:
        apt:
          packages:
            - g++-arm-linux-gnueabihf
            - nasm
            - qemu
            - qemu-user-static
            - yasm

    - os: linux
      dist: xenial
      compiler: gcc
      env:
        - AppImageBuild=True
        - AppImageArch=aarch64
      addons:
        apt:
          packages:
            - g++-aarch64-linux-gnu
            - nasm
            - qemu
            - qemu-user-static
            - yasm

before_install:
  - |
    # Set environment variables
    if [ "$AppImageBuild" = True ]; then
      export OS=`uname`
      if [ "$AppImageArch" = i686 ]; then
        export ARCH=i386
        export HOST=i386-linux-gnu
        export BUILD_X86=True
      elif [ "$AppImageArch" = x86_64 ]; then
        export ARCH=amd64
        export HOST=x86_64-linux-gnu
      elif [ "$AppImageArch" = armhf ]; then
        export ARCH=armhf
        export HOST=arm-linux-gnueabihf
      elif [ "$AppImageArch" = aarch64 ]; then
        export ARCH=arm64
        export HOST=aarch64-linux-gnu
      fi
    fi
  - |
    if [ "$AppImageBuild" = True ]; then
      if [[ "$AppImageArch" != i686 && "$AppImageArch" != x86_64 ]]; then
        sudo dpkg --add-architecture $ARCH
        sudo rm -f /usr/bin/gcc /usr/bin/g++ /usr/bin/cpp /usr/bin/ld /usr/bin/strip
        sudo ln -s $HOST-gcc /usr/bin/gcc
        sudo ln -s $HOST-g++ /usr/bin/g++
        sudo ln -s $HOST-cpp /usr/bin/cpp
        sudo ln -s $HOST-ld /usr/bin/ld
        sudo ln -s $HOST-strip /usr/bin/strip
        sudo echo "deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports xenial main restricted" >> /etc/apt/sources.list
        sudo echo "deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports xenial-updates main restricted" >> /etc/apt/sources.list
        sudo echo "deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports xenial-security main restricted" >> /etc/apt/sources.list
        sudo sed -i 's/deb http/deb \[arch=amd64,i386\] http/g' /etc/apt/sources.list
        sudo apt update
      fi
      sudo rm /etc/gtk-3.0/settings.ini
      sudo apt remove -y libcups2
      sudo apt install -y adwaita-icon-theme:$ARCH gir1.2-gtk-3.0:$ARCH libasound2-dev:$ARCH libblkid1:$ARCH libcairo2-dev:$ARCH libcups2:$ARCH libegl1-mesa-dev:$ARCH libfuse2:$ARCH libgdk-pixbuf2.0-dev:$ARCH libgtk-3-dev:$ARCH libgtk-3-0:$ARCH libgtk-3-common:$ARCH libncurses-dev:$ARCH libpango1.0-dev:$ARCH libpulse-dev:$ARCH libpulse0:$ARCH libpulse-mainloop-glib0:$ARCH librest-0.7-0:$ARCH libsm-dev:$ARCH libsm6:$ARCH libsndfile1-dev:$ARCH libsndfile1:$ARCH libssl-dev:$ARCH libudev-dev:$ARCH libuuid1:$ARCH libxft-dev:$ARCH zlib1g-dev:$ARCH
    fi

script:
  - |
    # Build libcdio
    ./tools/build-codecs libcdio libcdio-paranoia
  - |
    # Build libcurl
    if [ "$AppImageBuild" = True ]; then
      wget -c https://curl.haxx.se/download/curl-7.64.1.tar.bz2
      tar xfj curl-7.64.1.tar.bz2
      cd curl-7.64.1
      if [ $AppImageArch = i686 ]; then
        CFLAGS="-m32" ./configure --with-ssl --without-librtmp --disable-ldap
      else
        ./configure --host=$HOST --with-ssl --without-librtmp --disable-ldap
      fi
      make -j$(nproc) && sudo make install
      sudo rm /usr/local/bin/curl
      cd ..
    fi
  - |
    # Build smooth
    git clone https://github.com/enzo1982/smooth.git enzo1982/smooth
    cd enzo1982/smooth
    CONFIG="bundledlibbz2,bundledlibfribidi,bundledlibjpeg,bundledlibpng,bundledlibxml2,bundledzlib"
    if [ "$AppImageBuild" = True ]; then
      CONFIG+=",release"
      export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/$HOST/pkgconfig
    fi
    make config=$CONFIG BUILD_V8=False -j$(nproc) && sudo make config=$CONFIG BUILD_V8=False install
    if [ "$AppImageBuild" = True ]; then
      unset PKG_CONFIG_PATH
    fi
    cd ../..
  - |
    # Build BoCA
    git clone https://github.com/enzo1982/boca.git enzo1982/boca
    cd enzo1982/boca
    CONFIG="bundledlibexpat,bundledliburiparser,bundledzlib"
    if [ "$AppImageBuild" = True ]; then
      CONFIG+=",release"
    fi
    make config=$CONFIG -j$(nproc) && sudo make config=$CONFIG install
    if [ "$AppImageBuild" = True ] && [ "$AppImageArch" = x86_64 ]; then
      # Build 32 bit Core Audio connector
      cd components/encoder/coreaudioconnect/connector
      make BUILD_X86=True config=$CONFIG clean && make BUILD_X86=True config=$CONFIG -j$(nproc)
      sudo install ../../../../bin/boca_encoder_coreaudioconnect.1.0 /usr/local/lib/boca
      cd ../../../..
    fi
    cd ../..
  - |
    # Build fre:ac
    if [ "$AppImageBuild" = True ]; then
      CONFIG="release"
    fi
    make config=$CONFIG USE_V8=False -j$(nproc) && sudo make config=$CONFIG USE_V8=False install
  - |
    # Build codecs and DSP libraries
    if [ "$AppImageBuild" = True ]; then
      ./tools/build-codecs faad2 fdk-aac mp4v2
      ./tools/build-codecs lame mpg123
      ./tools/build-codecs libogg opus speex vorbis
      ./tools/build-codecs flac mac musepack wavpack
      ./tools/build-codecs libav libsndfile
      ./tools/build-codecs libsamplerate rnnoise rubberband
    fi
  - |
    # Install codecs
    if [ "$AppImageBuild" = True ]; then
      mkdir -p appdir/codecs
      cp /usr/local/lib/libFLAC.so appdir/codecs/FLAC.so
      cp /usr/local/lib/libMAC.so appdir/codecs/MAC.so
      cp /usr/local/lib/libfaad.so appdir/codecs/faad.so
      cp /usr/local/lib/libfdk-aac.so appdir/codecs/fdk-aac.so
      cp /usr/local/lib/libmp3lame.so appdir/codecs/mp3lame.so
      cp /usr/local/lib/libmp4v2.so appdir/codecs/mp4v2.so
      cp /usr/local/lib/libmpg123.so appdir/codecs/mpg123.so
      cp /usr/local/lib/libogg.so appdir/codecs/ogg.so
      cp /usr/local/lib/libopus.so appdir/codecs/opus.so
      cp /usr/local/lib/librnnoise.so appdir/codecs/rnnoise.so
      cp /usr/local/lib/librubberband.so appdir/codecs/rubberband.so
      cp /usr/local/lib/libsamplerate.so appdir/codecs/samplerate.so
      cp /usr/local/lib/libsndfile.so appdir/codecs/sndfile.so
      cp /usr/local/lib/libspeex.so appdir/codecs/speex.so
      cp /usr/local/lib/libvorbis.so appdir/codecs/vorbis.so
      cp /usr/local/lib/libvorbisenc.so appdir/codecs/vorbisenc.so
      strip --strip-all appdir/codecs/*.so
      install -Dm 0755 /usr/local/bin/avconv appdir/codecs/cmdline/avconv
      install -Dm 0755 /usr/local/bin/mpcdec appdir/codecs/cmdline/mpcdec
      install -Dm 0755 /usr/local/bin/mpcenc appdir/codecs/cmdline/mpcenc
      install -Dm 0755 /usr/local/bin/wavpack appdir/codecs/cmdline/wavpack
      install -Dm 0755 /usr/local/bin/wvunpack appdir/codecs/cmdline/wvunpack
      strip --strip-all appdir/codecs/cmdline/*
    fi
  - |
    # Copy smooth, BoCA and fre:ac to appdir
    if [ "$AppImageBuild" = True ]; then
    # Copy smooth
      cp /usr/local/lib/libsmooth*.so.? appdir
    # Copy BoCA
      cp -r /usr/local/lib/boca appdir
      ln -s boca/boca.1.0.so appdir/libboca-1.0.so.2
    # Copy fre:ac
      cp COPYING Readme* appdir
      rm appdir/Readme.md
      cp -r /usr/local/lib/freac/* appdir/boca
      cp -r /usr/local/share/freac/lang appdir
      cp -r /usr/local/share/freac/icons appdir
      cp -r /usr/local/share/doc/freac/manual appdir
      mv appdir/boca/freac.so appdir
      install -Dm 0755 /usr/local/bin/freac appdir/freac
      install -Dm 0755 /usr/local/bin/freaccmd appdir/freaccmd
      install -Dm 0755 /usr/local/bin/smooth-translator appdir/translator
      install -Dm 0755 packaging/appimage/AppRun appdir/AppRun
      mkdir -p appdir/usr/share
      cp -r /usr/local/share/applications appdir/usr/share
      cp -r /usr/local/share/metainfo appdir/usr/share
      ln -s usr/share/applications/org.freac.freac.desktop appdir/org.freac.freac.desktop
      cp /usr/local/share/icons/hicolor/128x128/apps/org.freac.freac.png appdir
    fi
  - |
    # Copy other dependencies
    if [ "$AppImageBuild" = True ]; then
      cp /usr/local/lib/libcdio.so.19 appdir
      cp /usr/local/lib/libcdio_cdda.so.2 appdir
      cp /usr/local/lib/libcdio_paranoia.so.2 appdir
      cp /usr/local/lib/libcurl.so.4 appdir
      cp -P /lib/$HOST/libcrypto.so.1* appdir
      cp -P /lib/$HOST/libssl.so.1* appdir
      strip --strip-all appdir/lib*.so*
    fi
  - |
    # Create AppImage using appimagetool
    if [ "$AppImageBuild" = True ]; then
      wget -c -nv "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-$AppImageArch.AppImage"
      chmod a+x appimagetool-$AppImageArch.AppImage
      if [ "$AppImageArch" = armhf ]; then
        qemu-arm-static ./appimagetool-$AppImageArch.AppImage appdir freac-continuous-${OS,,}-$AppImageArch.AppImage
      elif [ "$AppImageArch" = aarch64 ]; then
        qemu-aarch64-static ./appimagetool-$AppImageArch.AppImage appdir freac-continuous-${OS,,}-$AppImageArch.AppImage
      else
        ARCH=$AppImageArch ./appimagetool-$AppImageArch.AppImage appdir freac-continuous-${OS,,}-$AppImageArch.AppImage
      fi
    fi
  - |
    # Upload AppImage to GitHub
    if [ "$AppImageBuild" = True ]; then
      bash packaging/appimage/upload-appimage freac*.AppImage
    fi

branches:
  except:
    - # Do not build tags that we create when we upload to GitHub Releases
    - /^(?i:continuous)/
