language: cpp

branches:
  except:
    - i18n-master

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          packages:
            - libcurl4-openssl-dev
            - libgtk-3-dev
            - libpulse-dev
            - libudev-dev

    - os: linux
      compiler: clang
      addons:
        apt:
          packages:
            - libcurl4-openssl-dev
            - libgtk-3-dev
            - libpulse-dev
            - libudev-dev

    - os: osx
      compiler: gcc

    - os: osx
      compiler: clang

    - os: linux
      compiler: clang
      env:
        - AppImageBuild=True
      addons:
        apt:
          packages:
            - g++-multilib
            - libasound2-dev
            - libgtk-3-dev
            - libpulse-dev
            - libssl-dev
            - libudev-dev
            - nasm
            - yasm
            - wine1.6-dev

install:
  - |
    if [ $TRAVIS_OS_NAME = osx ]; then
      brew install libcdio
      wget https://ftp.gnu.org/gnu/libcdio/libcdio-paranoia-10.2+0.94+2.tar.gz
      tar xfz libcdio-paranoia-10.2+0.94+2.tar.gz
      cd libcdio-paranoia-10.2+0.94+2
      ./configure --prefix=/usr/local
      make && sudo make install
      cd ..
    fi

script:
  - |
    # Build libcdio
    if [ $TRAVIS_OS_NAME != osx ]; then
      ./tools/build-codecs libcdio libcdio-paranoia
    fi
  - |
    # Build libcurl
    if [ $AppImageBuild = True ]; then
      wget -c https://curl.haxx.se/download/curl-7.64.1.tar.bz2
      tar xfj curl-7.64.1.tar.bz2
      cd curl-7.64.1
      ./configure --with-ssl --without-librtmp --disable-ldap
      make -j$(nproc) && sudo make install
      cd ..
    fi
  - |
    # Build smooth
    git clone https://github.com/enzo1982/smooth.git enzo1982/smooth
    cd enzo1982/smooth
    CONFIG="bundledlibbz2,bundledlibfribidi,bundledlibjpeg,bundledlibpng,bundledlibxml2,bundledzlib"
    if [ $AppImageBuild = True ]; then
      CONFIG+=",release"
    fi
    make config=$CONFIG BUILD_V8=False -j$(nproc) && sudo make config=$CONFIG BUILD_V8=False install
    cd ../..
  - |
    # Build BoCA
    git clone https://github.com/enzo1982/boca.git enzo1982/boca
    cd enzo1982/boca
    CONFIG="bundledlibexpat,bundledliburiparser,bundledzlib"
    if [ $AppImageBuild = True ]; then
      CONFIG+=",release"
    fi
    make config=$CONFIG -j$(nproc) && sudo make config=$CONFIG install
    if [ $AppImageBuild = True ]; then
      # Build 32 bit Core Audio connector
      cd components/encoder/coreaudioconnect/connector
      make BUILD_X86=True config=$CONFIG clean && make BUILD_X86=True config=$CONFIG -j$(nproc)
      sudo install ../../../../bin/boca_encoder_coreaudioconnect.1.0 /usr/local/lib/boca
      cd ../../../..
    fi
    cd ../..
  - |
    # Build fre:ac
    if [ $AppImageBuild = True ]; then
      CONFIG="release"
    fi
    make config=$CONFIG USE_V8=False -j$(nproc) && sudo make config=$CONFIG USE_V8=False install
  - |
    # Create AppImage
    if [ $AppImageBuild = True ]; then
      OS=`uname`
      ARCH=`uname -m`
    # Build codecs
      ./tools/build-codecs faad2 fdk-aac mp4v2
      ./tools/build-codecs lame mpg123
      ./tools/build-codecs libogg opus speex vorbis
      ./tools/build-codecs flac mac musepack wavpack
      ./tools/build-codecs libav libsndfile
    # Build DSP libraries
      ./tools/build-codecs libsamplerate rnnoise rubberband
    # Install codecs
      mkdir -p appdir/codecs
      cp /usr/local/lib/libFLAC.so appdir/codecs/FLAC.so
      cp /usr/local/lib/libMAC.so appdir/codecs/MAC.so
      cp /usr/local/lib/libfaad.so appdir/codecs/faad.so
      cp /usr/local/lib/libfdk-aac.so appdir/codecs/fdk-aac.so
      cp /usr/local/lib/libmp3lame.so appdir/codecs/mp3lame.so
      cp /usr/local/lib/libmp4v2.so appdir/codecs/mp4v2.so
      cp /usr/local/lib/libmpg123.so appdir/codecs/mpg123.so
      cp /usr/local/lib/libogg.so appdir/codecs/ogg.so
      cp /usr/local/lib/libopus.so appdir/codecs/opus.so
      cp /usr/local/lib/librnnoise.so appdir/codecs/rnnoise.so
      cp /usr/local/lib/librubberband.so appdir/codecs/rubberband.so
      cp /usr/local/lib/libsamplerate.so appdir/codecs/samplerate.so
      cp /usr/local/lib/libsndfile.so appdir/codecs/sndfile.so
      cp /usr/local/lib/libspeex.so appdir/codecs/speex.so
      cp /usr/local/lib/libvorbis.so appdir/codecs/vorbis.so
      cp /usr/local/lib/libvorbisenc.so appdir/codecs/vorbisenc.so
      strip --strip-all appdir/codecs/*.so
      install -Dm 0755 /usr/local/bin/avconv appdir/codecs/cmdline/avconv
      install -Dm 0755 /usr/local/bin/mpcdec appdir/codecs/cmdline/mpcdec
      install -Dm 0755 /usr/local/bin/mpcenc appdir/codecs/cmdline/mpcenc
      install -Dm 0755 /usr/local/bin/wavpack appdir/codecs/cmdline/wavpack
      install -Dm 0755 /usr/local/bin/wvunpack appdir/codecs/cmdline/wvunpack
      strip --strip-all appdir/codecs/cmdline/*
    # Copy smooth and BoCA
      cp /usr/local/lib/libsmooth*.so.? appdir
      cp -r /usr/local/lib/boca appdir
      ln -s boca/boca.1.0.so appdir/libboca-1.0.so.1
    # Copy fre:ac to appdir
      cp COPYING Readme* appdir
      rm appdir/Readme.md
      cp -r /usr/local/lib/freac/* appdir/boca
      cp -r /usr/local/share/freac/lang appdir
      cp -r /usr/local/share/freac/icons appdir
      cp -r /usr/local/share/doc/freac/manual appdir
      mv appdir/boca/freac.so appdir
      install -Dm 0755 /usr/local/bin/freac appdir/freac
      install -Dm 0755 /usr/local/bin/freaccmd appdir/freaccmd
      install -Dm 0755 /usr/local/bin/smooth-translator appdir/translator
      install -Dm 0755 packaging/appimage/AppRun appdir/AppRun
      mkdir -p appdir/usr/share
      cp -r /usr/local/share/metainfo appdir/usr/share
      cp /usr/local/share/applications/org.freac.freac.desktop appdir
      cp /usr/local/share/icons/hicolor/128x128/apps/org.freac.freac.png appdir
    # Copy other dependencies
      cp /usr/local/lib/libcdio.so.19 appdir
      cp /usr/local/lib/libcdio_cdda.so.2 appdir
      cp /usr/local/lib/libcdio_paranoia.so.2 appdir
      cp /usr/local/lib/libcurl.so.4 appdir
      cp -P /lib/$ARCH-linux-gnu/libcrypto.so.1* appdir
      cp -P /lib/$ARCH-linux-gnu/libssl.so.1* appdir
      strip --strip-all appdir/lib*.so*
    # List final appdir contents
      ls -Rl appdir/
    # Create AppImage using appimagetool
      wget -c -nv "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-$ARCH.AppImage"
      chmod a+x appimagetool-$ARCH.AppImage
      ARCH=$ARCH ./appimagetool-$ARCH.AppImage appdir freac-continuous-${OS,,}-$ARCH.AppImage
    # Upload AppImage to GitHub
      bash packaging/appimage/upload-appimage freac*.AppImage
    fi

branches:
  except:
    - # Do not build tags that we create when we upload to GitHub Releases
    - /^(?i:continuous)/
