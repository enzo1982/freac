language: cpp

branches:
  except:
    - i18n-master

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          packages:
            - libcurl4-openssl-dev
            - libgtk-3-dev
            - libncurses-dev
            - libpulse-dev
            - libudev-dev

    - os: linux
      compiler: clang
      addons:
        apt:
          packages:
            - libcurl4-openssl-dev
            - libgtk-3-dev
            - libncurses-dev
            - libpulse-dev
            - libudev-dev

    - os: osx
      osx_image: xcode10.2
      compiler: gcc

    - os: osx
      osx_image: xcode10.2
      compiler: clang

    - os: linux
      dist: xenial
      compiler: gcc
      env:
        - AppImageBuild=True
        - AppImageArch=x86_64
      addons:
        apt:
          packages:
            - g++-multilib
            - nasm
            - wine1.6-dev
            - yasm

    - os: linux
      dist: xenial
      compiler: gcc
      env:
        - AppImageBuild=True
        - AppImageArch=i686
      addons:
        apt:
          packages:
            - g++-multilib
            - nasm
            - wine1.6-dev:i386
            - yasm

    - os: linux
      dist: xenial
      compiler: gcc
      env:
        - AppImageBuild=True
        - AppImageArch=armhf
      addons:
        apt:
          packages:
            - g++-arm-linux-gnueabihf
            - nasm
            - qemu
            - qemu-user-static
            - yasm

    - os: linux
      dist: xenial
      compiler: gcc
      env:
        - AppImageBuild=True
        - AppImageArch=aarch64
      addons:
        apt:
          packages:
            - g++-aarch64-linux-gnu
            - nasm
            - qemu
            - qemu-user-static
            - yasm

before_install:
  - |
    # Set environment variables
    if [ "$AppImageBuild" = True ]; then
      if [ "$AppImageArch" = i686 ]; then
        export ARCH=i386
        export HOST=i386-linux-gnu
      elif [ "$AppImageArch" = x86_64 ]; then
        export ARCH=amd64
        export HOST=x86_64-linux-gnu
      elif [ "$AppImageArch" = armhf ]; then
        export ARCH=armhf
        export HOST=arm-linux-gnueabihf
      elif [ "$AppImageArch" = aarch64 ]; then
        export ARCH=arm64
        export HOST=aarch64-linux-gnu
      fi
    fi
  - |
    if [ "$AppImageBuild" = True ]; then
      if [[ "$AppImageArch" != i686 && "$AppImageArch" != x86_64 ]]; then
        sudo dpkg --add-architecture $ARCH
        sudo rm -f /usr/bin/gcc /usr/bin/g++ /usr/bin/cpp /usr/bin/ld /usr/bin/strip
        sudo ln -s $HOST-gcc /usr/bin/gcc
        sudo ln -s $HOST-g++ /usr/bin/g++
        sudo ln -s $HOST-cpp /usr/bin/cpp
        sudo ln -s $HOST-ld /usr/bin/ld
        sudo ln -s $HOST-strip /usr/bin/strip
        sudo echo "deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports xenial main restricted" >> /etc/apt/sources.list
        sudo echo "deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports xenial-updates main restricted" >> /etc/apt/sources.list
        sudo echo "deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports xenial-security main restricted" >> /etc/apt/sources.list
        sudo sed -i 's/deb http/deb \[arch=amd64,i386\] http/g' /etc/apt/sources.list
        sudo apt update
      fi
      sudo rm /etc/gtk-3.0/settings.ini
      sudo apt remove -y libcups2
      sudo apt install -y adwaita-icon-theme gir1.2-gtk-3.0:$ARCH gnome-icon-theme libasound2-dev:$ARCH libblkid1:$ARCH libcairo2-dev:$ARCH libcups2:$ARCH libegl1-mesa-dev:$ARCH libfuse2:$ARCH libgdk-pixbuf2.0-dev:$ARCH libgtk-3-dev:$ARCH libgtk-3-0:$ARCH libgtk-3-common:$ARCH libncurses-dev:$ARCH libpango1.0-dev:$ARCH libpulse-dev:$ARCH libpulse0:$ARCH libpulse-mainloop-glib0:$ARCH librest-0.7-0:$ARCH libsm-dev:$ARCH libsm6:$ARCH libsndfile1-dev:$ARCH libsndfile1:$ARCH libssl-dev:$ARCH libudev-dev:$ARCH libuuid1:$ARCH libxft-dev:$ARCH zlib1g-dev:$ARCH
    fi

script:
  - |
    # Build AppImage
    if [ "$AppImageBuild" = True ]; then
      ./travis/build-appimage
    fi
  - |
    # Build libcdio
    if [ "$AppImageBuild" != True ]; then
      ./tools/build-codecs libcdio libcdio-paranoia
    fi
  - |
    # Build smooth
    if [ "$AppImageBuild" != True ]; then
      git clone https://github.com/enzo1982/smooth.git enzo1982/smooth
      cd enzo1982/smooth
      CONFIG="bundledlibbz2,bundledlibfribidi,bundledlibjpeg,bundledlibpng,bundledlibxml2,bundledzlib"
      make config=$CONFIG BUILD_V8=False -j$(nproc) && sudo make config=$CONFIG BUILD_V8=False install
      cd ../..
    fi
  - |
    # Build BoCA
    if [ "$AppImageBuild" != True ]; then
      git clone https://github.com/enzo1982/boca.git enzo1982/boca
      cd enzo1982/boca
      CONFIG="bundledlibexpat,bundledliburiparser,bundledzlib"
      make config=$CONFIG -j$(nproc) && sudo make config=$CONFIG install
      cd ../..
    fi
  - |
    # Build fre:ac
    if [ "$AppImageBuild" != True ]; then
      make config=$CONFIG USE_V8=False -j$(nproc) && sudo make config=$CONFIG USE_V8=False install
    fi

branches:
  except:
    - # Do not build tags that we create when we upload to GitHub Releases
    - /^(?i:continuous)/
